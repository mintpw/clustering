{"version":3,"sources":["components/InputForm/InputForm.module.css","components/InputForm/InputForm.jsx","App.js","index.js","App.module.css"],"names":["module","exports","InputForm","useState","textInput","setTextInput","saveInput","setSaveInput","group","setGroup","result","setResult","alertIsEnabled","setAlertIsEnabled","labels","datasets","pieData","setPieData","localStorage","getItem","token","setToken","useEffect","length","dataArray","zipChart","data","fill","backgroundColor","setItem","map","Map","forEach","item","groupId","get","set","sortDataArray","index","size","push","pieChart","options","title","display","text","position","fontColor","rotation","Math","PI","onClick","e","activeElement","listElement","groupArray","i","zip","element","_index","numberOfMessage","className","styles","container","containerContent","Alert","show","variant","onClose","dismissible","Heading","Card","cardStyle","Form","onSubmit","preventDefault","eachTextInput","split","axios","post","JSON","stringify","max_k","samples","timeout","then","response","message","cluster","toUpperCase","catch","error","console","log","Group","Label","style","color","Control","as","rows","id","value","onChange","target","Button","button","type","disabled","containerPie","cardResult","Body","App","header","footer","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,iBAAmB,oCAAoC,aAAe,gCAAgC,UAAY,6BAA6B,WAAa,8BAA8B,OAAS,4B,4NCiM/OC,EA5LG,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACfC,EADe,KACJC,EADI,OAEYF,mBAAS,IAFrB,mBAEfG,EAFe,KAEJC,EAFI,OAGIJ,mBAAS,IAHb,mBAGfK,EAHe,KAGRC,EAHQ,OAIMN,mBAAS,IAJf,mBAIfO,EAJe,KAIPC,EAJO,OAKsBR,oBAAS,GAL/B,mBAKfS,EALe,KAKCC,EALD,OAMQV,mBAAS,CAAEW,OAAQ,GAAIC,SAAU,KANzC,mBAMfC,EANe,KAMNC,EANM,OAOId,oBAAS,kBAAMe,aAAaC,QAAQ,YAPxC,mBAOfC,EAPe,KAORC,EAPQ,KAStBC,qBAAU,WACR,GAAIZ,EAAOa,OAAS,EAAG,CACrB,IAAIC,EAAYC,EAASf,GACzBO,EAAW,CACTH,OAAQ,CAAC,UAAW,UAAW,WAC/BC,SAAU,CACR,CACEW,KAAMF,EACNG,MAAM,EACNC,gBAAiB,CAAC,UAAW,UAAW,kBAK/C,CAAClB,IAEJY,qBAAU,WACRJ,aAAaW,QAAQ,QAAST,KAC7B,CAACA,IAEJ,IAsCIK,EAAW,SAACf,GACd,IAAMoB,EAAM,IAAIC,IAChBrB,EAAOsB,SAAQ,SAACC,GACd,IAAMC,EAAUD,EACMH,EAAIK,IAAID,GAI5BJ,EAAIM,IAAIF,EAASJ,EAAIK,IAAID,GAAW,GAFpCJ,EAAIM,IAAIF,EAAS,MAOrB,IADA,IAAIG,EAAgB,GACXC,EAAQ,EAAGA,EAAQR,EAAIS,KAAMD,IACpCD,EAAcG,KAAKV,EAAIK,IAAIG,IAE7B,OAAOD,GAGLI,EACF,kBAAC,IAAD,CACEf,KAAMV,EACN0B,QAAS,CACPC,MAAO,CACLC,SAAS,EACTC,KAAM,mBACNC,SAAU,MACVC,UAAW,WAEbC,UAAW,GAAMC,KAAKC,GACtBC,QAAS,SAAUC,EAAGC,GAChBA,GACEA,EAAc9B,OAAS,GACzBd,GAAS,WAIP,IAHA,IAAM6C,EAAc,GACdC,EAtCV,SAACjD,EAAWI,GAAZ,OACRJ,EAAUwB,KAAI,SAACG,EAAMuB,GAAP,MAAa,CAACvB,EAAMvB,EAAO8C,OAqCVC,CAAInD,EAAWI,GAEzB4B,EAAQ,EAAGA,EAAQiB,EAAWhC,OAAQe,IAAS,CACtD,IAAMoB,EAAUH,EAAWjB,GACvBoB,EAAQ,KAAOL,EAAc,GAAGM,QAClCL,EAAYd,KAAK,4BAAKkB,EAAQ,KAIlC,IAAME,EACJN,EAAY/B,OAAS,EAAI,WAAa,UACxC,OACE,oCACE,qCACS8B,EAAc,GAAGM,OAAS,EADnC,KACwCL,EAAY/B,OAAQ,IACzDqC,EAFH,KAIA,4BAAKN,WAWvB,OACE,yBAAKO,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOE,kBACrB,kBAACC,EAAA,EAAD,CACEC,KAAMtD,EACNuD,QAAQ,SACRC,QAAS,kBAAMvD,GAAkB,IACjCwD,aAAW,GACX,kBAACJ,EAAA,EAAMK,QAAP,cACA,6EAGF,kBAACC,EAAA,EAAD,CAAMV,UAAWC,IAAOU,WACtB,kBAACC,EAAA,EAAD,CAAMC,SAlHO,SAACtB,GAIpB,GAHAA,EAAEuB,iBACF9D,GAAkB,GAEbO,KAIDhB,EAAUmB,QAAU,GAAxB,CAIA,IAAIqD,EAAgBxE,EAAUyE,MAAM,MACpCtE,EAAaqE,GACbE,IACGC,KACC,yDAA2D3D,EAC3D4D,KAAKC,UAAU,CACbC,MAAO,EACPC,QAASP,IAEX,CAAEQ,QAAS,MAEZC,MAAK,SAAUC,GAAW,IAAD,QACxB3E,EAAS,OAAC2E,QAAD,IAACA,GAAD,UAACA,EAAU5D,YAAX,iBAAC,EAAgBhB,cAAjB,iBAAC,EAAwB6E,eAAzB,aAAC,EAAiCC,SACS,WAAxC,OAARF,QAAQ,IAARA,GAAA,UAAAA,EAAU5D,YAAV,eAAgBhB,OAAOA,OAAO+E,gBAChC5E,GAAkB,MAGrB6E,OAAM,SAAUC,GACfC,QAAQC,IAAIF,GACZ9E,GAAkB,SAoFd,kBAAC4D,EAAA,EAAKqB,MAAN,KACE,kBAACrB,EAAA,EAAKsB,MAAN,cACQ,0BAAMC,MAAO,CAAEC,MAAO,QAAtB,MAER,kBAACxB,EAAA,EAAKyB,QAAN,CACEC,GAAG,QACHC,KAAK,KACLC,GAAG,aACHC,MAAOlF,EACPmF,SAAU,SAACnD,GAAD,OAAO/B,EAAS+B,EAAEoD,OAAOF,UAGrC,kBAAC7B,EAAA,EAAKsB,MAAN,2BACqB,0BAAMC,MAAO,CAAEC,MAAO,QAAtB,MAErB,kBAACxB,EAAA,EAAKyB,QAAN,CACEC,GAAG,WACHC,KAAK,KACLC,GAAG,WACHC,MAAOlG,EACPmG,SAAU,SAACnD,GAAD,OAAO/C,EAAa+C,EAAEoD,OAAOF,WAG3C,kBAACG,EAAA,EAAD,CACE5C,UAAWC,IAAO4C,OAClBC,KAAK,SACLC,UAAWxF,GAAShB,EAAUmB,QAAU,GAH1C,YASJ,yBAAKsC,UAAWC,IAAO+C,cAAepE,GACtC,kBAAC8B,EAAA,EAAD,CAAMV,UAAWC,IAAOgD,YACtB,kBAACvC,EAAA,EAAKwC,KAAN,KACE,gDACCvG,OCvKEwG,E,uKAZX,OACE,yBAAKnD,UAAWC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOmD,QACrB,+CAEF,kBAAC,EAAD,MACA,yBAAKpD,UAAWC,IAAOoD,c,GARbC,IAAMC,WCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCHjDxH,EAAOC,QAAU,CAAC,UAAY,uBAAuB,OAAS,oBAAoB,OAAS,sB","file":"static/js/main.cd919b35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InputForm_container__2T8ml\",\"containerContent\":\"InputForm_containerContent__2_R1w\",\"containerPie\":\"InputForm_containerPie__3ZWhm\",\"cardStyle\":\"InputForm_cardStyle__1QeSL\",\"cardResult\":\"InputForm_cardResult__2MAbp\",\"button\":\"InputForm_button__nIwEj\"};","import React, { useState, useEffect } from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap';\r\nimport styles from './InputForm.module.css';\r\nimport axios from 'axios';\r\n\r\nconst InputForm = () => {\r\n  const [textInput, setTextInput] = useState([]);\r\n  const [saveInput, setSaveInput] = useState([]);\r\n  const [group, setGroup] = useState([]);\r\n  const [result, setResult] = useState([]);\r\n  const [alertIsEnabled, setAlertIsEnabled] = useState(false);\r\n  const [pieData, setPieData] = useState({ labels: [], datasets: [] });\r\n  const [token, setToken] = useState(() => localStorage.getItem('token'));\r\n\r\n  useEffect(() => {\r\n    if (result.length > 0) {\r\n      let dataArray = zipChart(result);\r\n      setPieData({\r\n        labels: ['Group 1', 'Group 2', 'Group 3'],\r\n        datasets: [\r\n          {\r\n            data: dataArray,\r\n            fill: true,\r\n            backgroundColor: ['#303960', '#ea9a96', '#f8b24f'],\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }, [result]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('token', token);\r\n  }, [token]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setAlertIsEnabled(false);\r\n\r\n    if (!token) {\r\n      return;\r\n    }\r\n\r\n    if (textInput.length <= 0) {\r\n      return;\r\n    }\r\n\r\n    let eachTextInput = textInput.split('\\n');\r\n    setSaveInput(eachTextInput);\r\n    axios\r\n      .post(\r\n        'https://nlp.insightera.co.th/api/nlp/clustering?token=' + token,\r\n        JSON.stringify({\r\n          max_k: 3,\r\n          samples: eachTextInput,\r\n        }),\r\n        { timeout: 4000 }\r\n      )\r\n      .then(function (response) {\r\n        setResult(response?.data?.result?.message?.cluster);\r\n        if (response?.data?.result.result.toUpperCase() === 'ERROR') {\r\n          setAlertIsEnabled(true);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setAlertIsEnabled(true);\r\n      });\r\n  };\r\n\r\n  let zip = (saveInput, result) =>\r\n    saveInput.map((item, i) => [item, result[i]]);\r\n\r\n  let zipChart = (result) => {\r\n    const map = new Map();\r\n    result.forEach((item) => {\r\n      const groupId = item;\r\n      const numberOfItems = map.get(groupId);\r\n      if (!numberOfItems) {\r\n        map.set(groupId, 1);\r\n      } else {\r\n        map.set(groupId, map.get(groupId) + 1);\r\n      }\r\n    });\r\n\r\n    let sortDataArray = [];\r\n    for (let index = 0; index < map.size; index++) {\r\n      sortDataArray.push(map.get(index));\r\n    }\r\n    return sortDataArray;\r\n  };\r\n\r\n  var pieChart = (\r\n    <Pie\r\n      data={pieData}\r\n      options={{\r\n        title: {\r\n          display: true,\r\n          text: 'Analysis Results',\r\n          position: 'top',\r\n          fontColor: '#303960',\r\n        },\r\n        rotation: -0.7 * Math.PI,\r\n        onClick: function (e, activeElement) {\r\n          if (activeElement) {\r\n            if (activeElement.length > 0) {\r\n              setGroup(() => {\r\n                const listElement = [];\r\n                const groupArray = zip(saveInput, result);\r\n\r\n                for (let index = 0; index < groupArray.length; index++) {\r\n                  const element = groupArray[index];\r\n                  if (element[1] === activeElement[0]._index) {\r\n                    listElement.push(<li>{element[0]}</li>);\r\n                  }\r\n                }\r\n\r\n                const numberOfMessage =\r\n                  listElement.length > 1 ? 'Messages' : 'Message';\r\n                return (\r\n                  <>\r\n                    <h4>\r\n                      Group {activeElement[0]._index + 1} ({listElement.length}{' '}\r\n                      {numberOfMessage})\r\n                    </h4>\r\n                    <ol>{listElement}</ol>\r\n                  </>\r\n                );\r\n              });\r\n            }\r\n          }\r\n        },\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.containerContent}>\r\n        <Alert\r\n          show={alertIsEnabled}\r\n          variant='danger'\r\n          onClose={() => setAlertIsEnabled(false)}\r\n          dismissible>\r\n          <Alert.Heading>SORRY</Alert.Heading>\r\n          <p>Something went wrong! Please try again later!</p>\r\n        </Alert>\r\n\r\n        <Card className={styles.cardStyle}>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Token <span style={{ color: 'red' }}>*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as='input'\r\n                rows='10'\r\n                id='tokenInput'\r\n                value={token}\r\n                onChange={(e) => setToken(e.target.value)}\r\n              />\r\n\r\n              <Form.Label>\r\n                Input Message Here <span style={{ color: 'red' }}>*</span>\r\n              </Form.Label>\r\n              <Form.Control\r\n                as='textarea'\r\n                rows='10'\r\n                id='textarea'\r\n                value={textInput}\r\n                onChange={(e) => setTextInput(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              className={styles.button}\r\n              type='submit'\r\n              disabled={!token || textInput.length <= 0}>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Card>\r\n\r\n        <div className={styles.containerPie}>{pieChart}</div>\r\n        <Card className={styles.cardResult}>\r\n          <Card.Body>\r\n            <h2>Analysis Results</h2>\r\n            {group}\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import React from 'react';\nimport styles from './App.module.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { InputForm } from './components';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <h2>Clustering API</h2>\n        </div>\n        <InputForm />\n        <div className={styles.footer}></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__sT-Fr\",\"header\":\"App_header__3szUO\",\"footer\":\"App_footer__1OIFT\"};"],"sourceRoot":""}